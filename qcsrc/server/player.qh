// reserved sound names for the future (models lack sounds for them):
//		_VOICEMSG(affirmative) \
//		_VOICEMSG(attacking) \
//		_VOICEMSG(defending) \
//		_VOICEMSG(roaming) \
//		_VOICEMSG(onmyway) \
//		_VOICEMSG(droppedflag) \
//		_VOICEMSG(flagcarriertakingdamage) \
//		_VOICEMSG(negative) \
//		_VOICEMSG(seenenemy) \
//		_VOICEMSG(fall) \
//		_VOICEMSG(getflag) \
//		_VOICEMSG(incoming) \
//		_VOICEMSG(coverme) \
//		_VOICEMSG(needhelp) \
//		_VOICEMSG(defend) \
//		_VOICEMSG(freelance) \
//		_VOICEMSG(falling) \
void() player_init;
void(float killed) player_clear;
float(entity plr, entity viewer) player_alpha;
float(float current, float regenstable, float regenfactor, float regenlinear, float regenframetime, float rotstable, float rotfactor, float rotlinear, float rotframetime, float limit) player_calc_rot_regen;
void() player_setup_model;
void(entity player) player_to_spec;
void() player_think;
float(entity plr, float wep) player_can_fire;
string(entity p) player_name; // decolorizes and team colors the player name when needed
void(entity pl, float _color) player_set_colors;
void(entity pl, float t, float s, float noprint) player_set_team;
entity(entity pl) player_entity;
void(void) player_leave;
void(void) player_dmg_inflictor_setup;
#define PLAYER_ALIVE(x) (x.deadflag == 0 || x.deadflag > DEAD_RESPAWNING)
#define PLAYER_DEAD(x) (x.deadflag)
#define PLAYER_REALLY_DEAD(x) (x.deadflag > 0 && x.deadflag <= DEAD_RESPAWNING)
#define PLAYER_REALLY_ALIVE(x) (!x.deadflag)
#define FOR_EACH_PLAYER(v) FOR_EACH_CLIENT(v) if(v.classname == "player")
#define FOR_EACH_REALPLAYER(v) FOR_EACH_REALCLIENT(v) if(v.classname == "player")
#define FOR_EACH_TEAMPLAYER(x) FOR_EACH_CLIENT(x) if (x.team > 0)
float player_count;
vector PL_VIEW_OFS;
vector PL_MIN;
vector PL_MAX;
vector PL_CROUCH_VIEW_OFS;
vector PL_CROUCH_MIN;
vector PL_CROUCH_MAX;

float g_maxpushtime;
float player_independent;
#define PLAYER_INDPENDENT_CLIPGROUP 1337
#define PLAYER_IS_INDEPENDENT(e) ((e).clipgroup == PLAYER_INDPENDENT_CLIPGROUP)
#define PLAYER_MAKE_INDEPENDENT(e) ((e).clipgroup = PLAYER_INDPENDENT_CLIPGROUP)
float g_playerclip_collisions;
float player_start_items;
float player_start_health;
float player_start_armorvalue;
float player_start_weapons;
float player_start_weapons_extra;
float player_start_ammo_shells;
float player_start_ammo_nails;
float player_start_ammo_rockets;
float player_start_ammo_cells;
float player_start_ammo_fuel;
