var float(entity attacker, entity inflictor, float deathtype) gamehook_player_death_handle = { return FALSE; }
var float() gamehook_chain_physics_max_speed_mod = { return 1; }
var void(entity spot) gamehook_chain_spawn = {}
var void(float killed) gamehook_chain_player_clear = {}
var float(entity attacker, entity targ, float f) gamehook_score_give_frag_mod = { return f; }
float gamehook_chain_player_damage_mod;
var float(entity inflictor, entity attacker, float damage, float deathtype, vector hitloc, vector force) gamehook_chain_player_damage_handle = { return FALSE; }
var float(entity plr, float wep) gamehook_chain_PlayerCanFire = { return TRUE; }
var float() gamehook_PlayerAllowedToMove = { return TRUE; }
var void() gamehook_PhysicFrameBegin = {}
var void(void) gamehook_chain_player_think = {}
var entity() gamehook_client_put_spawn_point = {
	entity spot;
	spot = spawn_select(FALSE);
	if not(spot)
		spot = spawn_select(TRUE);

	return spot;
}
var float(float fraglimit, float _leadlimit) gamehook_winning_condition = {
	if (world_check_rules_run_out_spawns()) {
		bprint("Hey! Someone ran out of spawns!\n");
		return TRUE;
	}
	return score_winning_condition(fraglimit, _leadlimit);
}
var float() gamehook_OvertimeHandle = { return FALSE; }
var float() gamehook_OvertimeAllowed = { return TRUE; }
var void() gamehook_world_reset = {}
var void() gamehook_chain_observer_spawn = {}
var void() gamehook_InitSpectator = {}
var float(entity spot) gamehook_SpawnPointGood = { return TRUE; }
var void(float frags_remain) stub_score_winning_condition_countdown = {}
var void(float frags_remain) gamehook_score_winning_condition_countdown = {
	if (frags_remain == 1)
		sound_play2all("announcer/robotic/1fragleft.wav");
	else if (frags_remain == 2)
		sound_play2all("announcer/robotic/2fragsleft.wav");
	else if (frags_remain == 3)
		sound_play2all("announcer/robotic/3fragsleft.wav");
}
var string(string s) gamehook_SuddenDeathMessageMod = { return s; }
var string(string s) gamehook_map_finish_message_mod = { return s; }
var float() false_WarmupAllowed = { return FALSE; }
var float() gamehook_WarmupAllowed = { return TRUE; }
var float() gamehook_ReadyAllowed = { return FALSE; }
var float() gamehook_ClearScoreAllowed = { return TRUE; }
var float() gamehook_TelefragsAllowed = { return TRUE; }
var string() gamehook_client_fix_cvars = { return ""; }
var string(string bspname) gamehook_world_record_for_map = { return ""; }
var float() gamehook_ReadyRestartHard = { return FALSE; }
var float() gamehook_chain_weapon_frame_handle = { return FALSE; }
var float() gamehook_ReloadAllowed = { return TRUE; }
var float(float dropped) gamehook_chain_ThrowWeaponAllowed = { return TRUE; }
var void(entity e) gamehook_chain_spectator_copy = {}
float gamehook_chain_damage_mod;
float gamehook_chain_damage_mod_force;
float gamehook_chain_damage_mod_mirror;
float gamehook_chain_damage_mod_force_mirror;
var void(entity targ, entity attacker, float deathtype) gamehook_chain_damage_mods_set = {}
var void(void(string item, string cmd) Add_Item) gamehook_chain_gamemenu_send = {};
var float(string cmd, float tokens) gamehook_chain_cmd_client_handle = { return FALSE; }
var float(string cmd, float tokens) gamehook_chain_cmd_game_handle = { return FALSE; }
var void() gamehook_chain_entity_spawn_pre = {};
float gamehook_player_health_max_mod;
float gamehook_player_armor_health_limit_mod;
float gamehook_player_regen_mod;
float gamehook_player_rot_mod;
float gamehook_player_health_armor_rot_regen;
var void() gamehook_chain_player_health_armor_fuel_mods_set = {}
var float() gamehook_chain_JumpVelocityMod = { return 1; }
var float() gamehook_chain_weapon_rate_factor = { return 1; }
var void(entity targ, entity attacker, float damage, vector force) gamehook_chain_damage_force_done = {}
var void(entity attacker) gamehook_monster_killed {}
var float() gamehook_MonsterQuant { return 1; }
var float(entity plr, entity viewer, float palpha) gamehook_chain_player_alpha_mod = { return palpha; }
var float(float secondary, float attacktime) gamehook_chain_WeaponPrepareAttack = { return TRUE; }
var float(entity item, entity player) gamehook_chain_ItemGiveToHandle = { return FALSE; }
float gamehook_chain_ItemGiveToHandle_PickedUp;
float gamehook_chain_ItemGiveToHandle_SwitchWeapon;
var float(float wpn) gamehook_chain_WeaponSpawnHandle = { return FALSE; }
var void() gamehook_chain_client_connect_real = {}
var void() gamehook_chain_client_connect = {}
var void() gamehook_chain_client_disconnect_real = {}
var void() gamehook_chain_world_frame_start = {}
var float() gamehook_chain_ItemForbidden = { return FALSE; }
var void() gamehook_chain_player_effects = {}
var float(float c) gamehook_chain_player_colors_mod = { return c; }
var float() gamehook_chain_JoinHandle = { return FALSE; }
var float(entity attacker, entity inflictor, float mirrordamage, vector force) gamehook_chain_MirrorDamageHandle = { return FALSE; }
var float(entity plr) gamehook_player_is_carrier { return FALSE; }
var void(entity plr) gamehook_player_drop_carried {}
var float(entity plr) gamehook_chain_PlayerCanBeCarrier { return TRUE; }
var float(entity e) gamehook_portal_forbidden_for { return FALSE; }
string gamehook_ItemName;
vector gamehook_ItemColor;
var void() gamehook_chain_ItemRespawnCountDown {}
var float() gamehook_chain_ArmorBlockPercentMod { return 1; }
var float(entity plr, entity targ) gamehook_chain_PlayerCanSeeHealthFor { return FALSE; }
var float(entity plr, entity targ) gamehook_chain_PlayerVisibleThroughWallFor { return FALSE; }
var float() gamehook_chain_ThrowWeaponHandle { return FALSE; }
var void(entity source, string msg) gamehook_chain_PublicPlayerChat = {}
var void() gamehook_havocbot_role_choose = { havocbot_role_choose_dm(); }
var void() gamehook_client_parms_new = {}
var void() gamehook_client_parms_change = {}
var void() gamehook_client_parms_decode = {}
var float(void) gamehook_forbid_specatators = { return FALSE; }
var float(void) gamehook_chain_player_equip_handle = { return FALSE; }
var float(void) gamehook_map_restart = { return FALSE; }
var float() gamehook_monster_team_switchable = { return TRUE; }
var void() gamehook_chain_shutdown = {}
var float(float tempo) gamehook_chain_TempoMod = { return tempo; }
var float() gamehook_chain_player_death_weapon_throw_handle = { return FALSE; }
var float() gamehook_chain_ProjectileTouchHandle = { return FALSE; }
var float(float f) gamehook_chain_SwitchWeaponMod = { return f; }
var entity(entity pl) gamehook_chain_player_entity = { return pl; }
var float(void) gamehook_chain_bot_aim = { return FALSE; }
var float(float deathtype, entity targ, entity inflictor, entity attacker) gamehook_chain_player_obituary_frag = { return FALSE; }
