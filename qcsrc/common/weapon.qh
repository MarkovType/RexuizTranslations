enum {
	WEAPON_LASER = 1,
	WEAPON_SHOTGUN,
	WEAPON_UZI,
	WEAPON_GRENADE_LAUNCHER,
	WEAPON_ELECTRO,
	WEAPON_CRYLINK,
	WEAPON_NEX,
	WEAPON_HAGAR,
	WEAPON_ROCKET_LAUNCHER,
	WEAPON_PORTO,
	WEAPON_MINSTANEX,
	WEAPON_HOOK,
	WEAPON_HLAC,
	WEAPON_TUBA,
	WEAPON_CAMPINGRIFLE,
	WEAPON_FIREBALL,
	WEAPON_SUPERSHOTGUN,
	WEAPON_ZAPPER,
	WEAPON_MELEE,
};
#define WEAPON_FIRST WEAPON_LASER
#define WEAPON_LAST WEAPON_MELEE
#define WEAPON_COUNT (WEAPON_LAST + 1)
#define WEAPON_LAST_EXTRA 27
#define WEAPON_COUNT_EXTRA (WEAPON_LAST_EXTRA + 1)

// functions:
entity(float id) weapon_info;
entity weapon_info_chain;
#define WEAPON_INFO_FOR_EACH(x) for (x = weapon_info_chain; x; x = x.enemy) if (x.weapon)
#define WEAPON_INFO_FOR_EACH_ID(x) for (x = WEAPON_FIRST; x <= WEAPON_LAST_EXTRA; x++)

// entity properties of weaponinfo:
.float weapon; // WEP_...
.float weapons; // WEPBIT_...
.float weapons_extra; // extra weapon bit
.string netname; // short name
.string message; // human readable name
.float items; // IT_...
.float(float) weapon_func; // w_...
.string mdl; // modelname without g_, v_, w_
.string model; // full name of g_ model
.float impulse; // weapon impulse

#ifdef SVQC
#define weapon_register(id,func,ammotype,i,normalweapon,canclimb,pickupbasevalue,modelname,shortname,wname) \
	weapon_register_real(id,func,ammotype,i,normalweapon,canclimb,pickupbasevalue,modelname,shortname,wname)
#else
#ifdef MENUQC
#define weapon_register(id,func,ammotype,i,normalweapon,canclimb,pickupbasevalue,modelname,shortname,wname) \
	weapon_register_real(id,i,modelname,shortname,wname)
#else
// no weapon funcs here!
#define weapon_register(id,func,ammotype,i,normalweapon,canclimb,pickupbasevalue,modelname,shortname,wname) \
	weapon_register_real(id,ammotype,i,modelname,shortname,wname)
#endif
#endif

void(float id,
#ifdef SVQC
		float(float) func,
#endif
#ifndef MENUQC
		float ammotype,
#endif
		float i,
#ifdef SVQC
		float normalweapon, float canclimb, float pickupbasevalue,
#endif
		string modelname, string shortname, string wname) weapon_register_real;
