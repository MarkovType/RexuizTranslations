#define SVQC

// DO NOT modify the contents of this file, or you will risk incompatibility with the game engine.

entity		self;
entity		other;
entity		world;

float		time;
float		frametime;
float		force_retouch;
string		mapname;
float		deathmatch;
float		coop;
float		teamplay;
float		serverflags;
float		total_secrets;
float		total_monsters;
float		found_secrets;
float		killed_monsters;
float		parm1, parm2, parm3, parm4, parm5, parm6, parm7, parm8, parm9, parm10, parm11, parm12, parm13, parm14, parm15, parm16;
vector		v_forward, v_up, v_right;
float		trace_allsolid;
float		trace_startsolid;
float		trace_fraction;
vector		trace_endpos;
vector		trace_plane_normal;
float		trace_plane_dist;
entity		trace_ent;
float		trace_inopen;
float		trace_inwater;

entity		msg_entity;

void		main (void);
void		StartFrame (void);
void		PlayerPreThink (void);
void		PlayerPostThink (void);
void		ClientKill (void);
void		ClientConnect (void);
void		PutClientInServer (void);
void		ClientDisconnect (void);
void		SetNewParms (void);
void		SetChangeParms (void);

/////////////////////////////////////////////////////////
void		end_sys_globals;
/////////////////////////////////////////////////////////

.float		modelindex;

.vector		absmin, absmax;

.float		ltime;
.float		movetype;
.float		solid;

.vector		origin;
.vector		oldorigin;
.vector		velocity;
.vector		angles;
.vector		avelocity;
.vector		punchangle;

.string		classname;
.string		model;

.float		frame;
.float		skin;
.float		effects;

.vector		mins, maxs;
.vector		size;

.void()		touch;
.void()		use;
.void()		think;
.void()		blocked;

.float		nextthink;

.entity		groundentity;

.float		health;
.float		frags;

.float		weapon;
.string		weaponmodel;
.float		weaponframe;

.float		currentammo;
.float		ammo_shells, ammo_nails, ammo_rockets, ammo_cells;
.float		items;

.float		takedamage;

.entity		chain;

.float		deadflag;

.vector		view_ofs;

.float		button0;
.float		button1;
.float		button2;
.float		impulse;
.float		fixangle;
.vector		v_angle;
.float		idealpitch;

.string		netname;
.entity 	enemy;

.float		flags;
.float		colormap;
.float		team;
.float		max_health;
.float		teleport_time;
.float		armortype;
.float		armorvalue;
.float		waterlevel;
.float		watertype;
.float		ideal_yaw;
.float		yaw_speed;

.entity		aiment;
.entity 	goalentity;

.float		spawnflags;

.string		target;
.string		targetname;

.float		dmg_take;
.float		dmg_save;
.entity		dmg_inflictor;

.entity		owner;
.vector		movedir;
.string		message;
.float		sounds;
.string		noise, noise1, noise2, noise3;

/////////////////////////////////////////////////////////
void		end_sys_fields;
/////////////////////////////////////////////////////////
#define client_parms_new SetNewParms
#define client_parms_change SetChangeParms
#define client_kill ClientKill
#define client_connect ClientConnect
#define client_disconnect ClientDisconnect
#define client_put PutClientInServer
#define client_pre_think PlayerPreThink
#define client_post_think PlayerPostThink
#define cmd_game GameCommand
#define cmd_client SV_ParseClientCommand
#define world_frame_start StartFrame
#define world_frame_end EndFrame
//DP_SV_PLAYERPHYSICS
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//field definitions:
.vector movement;
//cvar definitions:
//"sv_playerphysicsqc" (0/1, default 1, allows user to disable qc player physics)
//engine-called QC prototypes:
//void() SV_PlayerPhysics;
//description:
//.movement vector contains the movement input from the player, allowing QC to do as it wishs with the input, and SV_PlayerPhysics will completely replace the player physics if present (works for all MOVETYPE's), see darkplaces mod source for example of this function (in playermovement.qc, adds HalfLife ladders support, as well as acceleration/deceleration while airborn (rather than the quake sudden-stop while airborn), and simplifies the physics a bit)
#define physics_player_pre SV_PlayerPhysics
//DP_SV_ONENTITYPREPOSTSPAWNFUNCTION
//idea: div0
//darkplaces implementation: div0
//engine-called QC prototypes:
//void() SV_OnEntityPreSpawnFunction;
//void() SV_OnEntityPostSpawnFunction;
//description:
// These functions are called BEFORE or AFTER an entity is spawned the regular way.
// You may as such dictate the behavior as to what happens to the entity.
// SV_OnEntityPreSpawnFunction is called before even looking for the spawn function, so you can even change its classname in there. If it remove()s the entity, the spawn function will not be looked for.
// SV_OnEntityPostSpawnFunction is called ONLY after its spawn function or SV_OnEntityNoSpawnFunction was called, and skipped if the entity got removed by either.
#define entity_spawn_pre SV_OnEntityPreSpawnFunction
#define entity_spawn_post SV_OnEntityPostSpawnFunction
//things that don't have extensions yet:
.float disableclientprediction;

//BX_WAL_SUPPORT
//idea: id Software
//darkplaces implementation: LordHavoc
//description:
//indicates the engine supports .wal textures for filenames in the textures/ directory
//(note: DarkPlaces has supported this since 2001 or 2002, but did not advertise it as an extension, then I noticed Betwix was advertising it and added the extension accordingly)

//DP_BUTTONCHAT
//idea: Vermeulen
//darkplaces implementation: LordHavoc
//field definitions:
.float buttonchat;
//description:
//true if the player is currently chatting (in messagemode, menus or console)

//DP_BUTTONUSE
//idea: id Software
//darkplaces implementation: LordHavoc
//field definitions:
.float buttonuse;
//client console commands:
//+use
//-use
//description:
//made +use and -use commands work, they now control the .buttonuse field (.button1 was used by many mods for other purposes).

//DP_CL_LOADSKY
//idea: Nehahra, LordHavoc
//darkplaces implementation: LordHavoc
//client console commands:
//"loadsky" (parameters: "basename", example: "mtnsun_" would load "mtnsun_up.tga" and "mtnsun_rt.tga" and similar names, use "" to revert to quake sky, note: this is the same as Quake2 skybox naming)
//description:
//sets global skybox for the map for this client (can be stuffed to a client by QC), does not hurt much to repeatedly execute this command, please don't use this in mods if it can be avoided (only if changing skybox is REALLY needed, otherwise please use DP_GFX_SKYBOX).

//DP_CON_SET
//idea: id Software
//darkplaces implementation: LordHavoc
//description:
//indicates this engine supports the "set" console command which creates or sets a non-archived cvar (not saved to config.cfg on exit), it is recommended that set and seta commands be placed in default.cfg for mod-specific cvars.

//DP_CON_SETA
//idea: id Software
//darkplaces implementation: LordHavoc
//description:
//indicates this engine supports the "seta" console command which creates or sets an archived cvar (saved to config.cfg on exit), it is recommended that set and seta commands be placed in default.cfg for mod-specific cvars.

//DP_CON_ALIASPARAMETERS
//idea: many
//darkplaces implementation: Black
//description:
//indicates this engine supports aliases containing $1 through $9 parameter macros (which when called will expand to the parameters passed to the alias, for example alias test "say $2 $1", then you can type test hi there and it will execute say there hi), as well as $0 (name of the alias) and $* (all parameters $1 onward).

//DP_CON_EXPANDCVAR
//idea: many, PHP
//darkplaces implementation: Black
//description:
//indicates this engine supports console commandlines containing $cvarname which will expand to the contents of that cvar as a parameter, for instance say my fov is $fov, will say "my fov is 90", or similar.

//DP_CON_STARTMAP
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//description:
//adds two engine-called aliases named startmap_sp and startmap_dm which are called when the engine tries to start a singleplayer game from the menu (startmap_sp) or the -listen or -dedicated options are used or the engine is a dedicated server (uses startmap_dm), these allow a mod or game to specify their own map instead of start, and also distinguish between singleplayer and -listen/-dedicated, also these need not be a simple "map start" command, they can do other things if desired, startmap_sp and startmap_dm both default to "map start".

//DP_ENT_ALPHA
//idea: Nehahra
//darkplaces implementation: LordHavoc
//fields:
.float alpha;
//description:
//controls opacity of the entity, 0.0 is forced to be 1.0 (otherwise everything would be invisible), use -1 if you want to make something invisible, 1.0 is solid (like normal).

//DP_ENT_COLORMOD
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//field definition:
.vector colormod;
//description:
//controls color of the entity, '0 0 0', is forced to be '1 1 1' (otherwise everything would be black), used for tinting objects, for instance using '1 0.6 0.4' on an ogre would give you an orange ogre (order is red green blue), note the colors can go up to '8 8 8' (8x as bright as normal).

//DP_ENT_CUSTOMCOLORMAP
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//description:
//if .colormap is set to 1024 + pants + shirt * 16, those colors will be used for colormapping the entity, rather than looking up a colormap by player number.

//DP_ENT_EXTERIORMODELTOCLIENT
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//fields:
.entity exteriormodeltoclient;
//description:
//the entity is visible to all clients with one exception: if the specified client is using first person view (not using chase_active) the entity will not be shown.  Also if tag attachments are supported any entities attached to the player entity will not be drawn in first person.

//DP_ENT_GLOW
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//field definitions:
.float glow_color;
.float glow_size;
.float glow_trail;
//description:
//customizable glowing light effect on the entity, glow_color is a paletted (8bit) color in the range 0-255 (note: 0 and 254 are white), glow_size is 0 or higher (up to the engine what limit to cap it to, darkplaces imposes a 1020 limit), if glow_trail is true it will leave a trail of particles of the same color as the light.

//DP_ENT_SCALE
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//field definitions:
.float scale;
//description:
//controls rendering scale of the object, 0 is forced to be 1, darkplaces uses 1/16th accuracy and a limit of 15.9375, can be used to make an object larger or smaller.

//DP_ENT_VIEWMODEL
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//field definitions:
.entity viewmodelforclient;
//description:
//this is a very special capability, attachs the entity to the view of the client specified, origin and angles become relative to the view of that client, all effects can be used (multiple skins on a weapon model etc)...  the entity is not visible to any other client.

//DP_GFX_EXTERNALTEXTURES
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//description:
//loads external textures found in various directories (tenebrae compatible)...
/*
in all examples .tga is merely the base texture, it can be any of these:
.tga (base texture)
_glow.tga (fullbrights or other glowing overlay stuff, NOTE: this is done using additive blend, not alpha)
_pants.tga (pants overlay for colormapping on models, this should be shades of grey (it is tinted by pants color) and black wherever the base texture is not black, as this is an additive blend)
_shirt.tga (same idea as pants, but for shirt color)
_diffuse.tga (this may be used instead of base texture for per pixel lighting)
_gloss.tga (specular texture for per pixel lighting, note this can be in color (tenebrae only supports greyscale))
_norm.tga (normalmap texture for per pixel lighting)
_bump.tga (bumpmap, converted to normalmap at load time, supported only for reasons of tenebrae compatibility)
_luma.tga (same as _glow but supported only for reasons of tenebrae compatibility)

due to glquake's incomplete Targa(r) loader, this section describes
required Targa(r) features support:
types:
type 1 (uncompressed 8bit paletted with 24bit/32bit palette)
type 2 (uncompressed 24bit/32bit true color, glquake supported this)
type 3 (uncompressed 8bit greyscale)
type 9 (RLE compressed 8bit paletted with 24bit/32bit palette)
type 10 (RLE compressed 24bit/32bit true color, glquake supported this)
type 11 (RLE compressed 8bit greyscale)
attribute bit 0x20 (Origin At Top Left, top to bottom, left to right)

image formats guaranteed to be supported: tga, pcx, lmp
image formats that are optional: png, jpg

mdl/spr/spr32 examples:
skins are named _A (A being a number) and skingroups are named like _A_B
these act as suffixes on the model name...
example names for skin _2_1 of model "progs/armor.mdl":
game/override/progs/armor.mdl_2_1.tga
game/textures/progs/armor.mdl_2_1.tga
game/progs/armor.mdl_2_1.tga
example names for skin _0 of the model "progs/armor.mdl":
game/override/progs/armor.mdl_0.tga
game/textures/progs/armor.mdl_0.tga
game/progs/armor.mdl_0.tga
note that there can be more skins files (of the _0 naming) than the mdl
contains, this is only useful to save space in the .mdl file if classic quake
compatibility is not a concern.

bsp/md2/md3 examples:
example names for the texture "quake" of model "maps/start.bsp":
game/override/quake.tga
game/textures/quake.tga
game/quake.tga

sbar/menu/console textures: for example the texture "conchars" (console font) in gfx.wad
game/override/gfx/conchars.tga
game/textures/gfx/conchars.tga
game/gfx/conchars.tga
*/

//DP_GFX_EXTERNALTEXTURES_PERMAPTEXTURES
//idea: Fuh?
//darkplaces implementation: LordHavoc
//description:
//Q1BSP and HLBSP map loading loads external textures found in textures/<mapname>/ as well as textures/.
//Where mapname is the bsp filename minus the extension (typically .bsp) and minus maps/ if it is in maps/ (any other path is not removed)
//example:
//maps/e1m1.bsp uses textures in the directory textures/e1m1/ and falls back to textures/
//maps/b_batt0.bsp uses textures in the directory textures/b_batt0.bsp and falls back to textures/
//as a more extreme example:
//progs/something/blah.bsp uses textures in the directory textures/progs/something/blah/ and falls back to textures/

//DP_GFX_FOG
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//worldspawn fields:
//"fog" (parameters: "density red green blue", example: "0.1 0.3 0.3 0.3")
//description:
//global fog for the map, can not be changed by QC

//DP_GFX_SKINFILES
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//description:
//alias models (mdl, md2, md3) can have .skin files to replace conventional texture naming, these have a naming format such as:
//progs/test.md3_0.skin
//progs/test.md3_1.skin
//...
//
//these files contain replace commands (replace meshname shadername), example:
//replace "helmet" "progs/test/helmet1.tga" // this is a mesh shader replacement
//replace "teamstripes" "progs/test/redstripes.tga"
//replace "visor" "common/nodraw" // this makes the visor mesh invisible
////it is not possible to rename tags using this format
//
//Or the Quake3 syntax (100% compatible with Quake3's .skin files):
//helmet,progs/test/helmet1.tga // this is a mesh shader replacement
//teamstripes,progs/test/redstripes.tga
//visor,common/nodraw // this makes the visor mesh invisible
//tag_camera, // this defines that the first tag in the model is called tag_camera
//tag_test, // this defines that the second tag in the model is called tag_test
//
//any names that are not replaced are automatically show up as a grey checkerboard to indicate the error status, and "common/nodraw" is a special case that is invisible.
//this feature is intended to allow multiple skin sets on md3 models (which otherwise only have one skin set).
//other commands might be added someday but it is not expected.

//DP_GFX_SKYBOX
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//worldspawn fields:
//"sky" (parameters: "basename", example: "mtnsun_" would load "mtnsun_up.tga" and "mtnsun_rt.tga" and similar names, note: "sky" is also used the same way by Quake2)
//description:
//global skybox for the map, can not be changed by QC

//DP_HALFLIFE_MAP
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//description:
//simply indicates that the engine supports HalfLife maps (BSP version 30, NOT the QER RGBA ones which are also version 30).

//DP_HALFLIFE_MAP_CVAR
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//cvars:
//halflifebsp 0/1
//description:
//engine sets this cvar when loading a map to indicate if it is halflife format or not.

//DP_HALFLIFE_SPRITE
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//description:
//simply indicates that the engine supports HalfLife sprites.

//DP_INPUTBUTTONS
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//field definitions:
.float button3;
.float button4;
.float button5;
.float button6;
.float button7;
.float button8;
.float button9;
//description:
//set to the state of the +button3, +button4, +button5, +button6, +button7, and +button8 buttons from the client, this does not involve protocol changes (the extra 6 button bits were simply not used).
//the exact mapping of protocol button bits on the server is:
//self.button0 = (bits & 1) != 0;
///* button1 is skipped because mods abuse it as a variable, and accordingly it has no bit */
//self.button2 = (bits & 2) != 0;
//self.button3 = (bits & 4) != 0;
//self.button4 = (bits & 8) != 0;
//self.button5 = (bits & 16) != 0;
//self.button6 = (bits & 32) != 0;
//self.button7 = (bits & 64) != 0;
//self.button8 = (bits & 128) != 0;

//DP_LITSPRITES
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//description:
//indicates this engine supports lighting on sprites, any sprite with ! in its filename (both on disk and in the qc) will be lit rather than having forced EF_FULLBRIGHT (EF_FULLBRIGHT on the entity can still force these sprites to not be lit).

//DP_LITSUPPORT
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//description:
//indicates this engine loads .lit files for any quake1 format .bsp files it loads to enhance maps with colored lighting.
//implementation description: these files begin with the header QLIT followed by version number 1 (as little endian 32bit), the rest of the file is a replacement lightmaps lump, except being 3x as large as the lightmaps lump of the map it matches up with (and yes the between-lightmap padding is expanded 3x to keep this consistent), so the lightmap offset in each surface is simply multiplied by 3 during loading to properly index the lit data, and the lit file is loaded instead of the lightmap lump, other renderer changes are needed to display these of course...  see the litsupport.zip sample code (almost a tutorial) at http://icculus.org/twilight/darkplaces for more information.

//DP_MONSTERWALK
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//description:
//MOVETYPE_WALK is permitted on non-clients, so bots can move smoothly, run off ledges, etc, just like a real player.

//DP_MOVETYPEBOUNCEMISSILE
//idea: id Software
//darkplaces implementation: id Software
//movetype definitions:
//float MOVETYPE_BOUNCEMISSILE = 11; // already in defs.qc
//description:
//MOVETYPE_BOUNCE but without gravity, and with full reflection (no speed loss like grenades have), in other words - bouncing laser bolts.

//DP_NULL_MODEL
//idea: Chris
//darkplaces implementation: div0
//definitions:
//string dp_null_model = "null";
//description:
//setmodel(e, "null"); makes an entity invisible, have a zero bbox, but
//networked. useful for shared CSQC entities.

//DP_MOVETYPEFOLLOW
//idea: id Software, LordHavoc (redesigned)
//darkplaces implementation: LordHavoc
//movetype definitions:
//float MOVETYPE_FOLLOW = 12;
//description:
//MOVETYPE_FOLLOW implemented, this uses existing entity fields in unusual ways:
//aiment - the entity this is attached to.
//punchangle - the original angles when the follow began.
//view_ofs - the relative origin (note that this is un-rotated by punchangle, and that is actually the only purpose of punchangle).
//v_angle - the relative angles.
//here's an example of how you would set a bullet hole sprite to follow a bmodel it was created on, even if the bmodel rotates:
//hole.movetype = MOVETYPE_FOLLOW; // make the hole follow
//hole.solid = SOLID_NOT; // MOVETYPE_FOLLOW is always non-solid
//hole.aiment = bmodel; // make the hole follow bmodel
//hole.punchangle = bmodel.angles; // the original angles of bmodel
//hole.view_ofs = hole.origin - bmodel.origin; // relative origin
//hole.v_angle = hole.angles - bmodel.angles; // relative angles

//DP_QC_MULTIPLETEMPSTRINGS
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//description:
//this extension makes all builtins returning tempstrings (ftos for example)
//cycle through a pool of multiple tempstrings (at least 16), allowing
//multiple ftos results to be gathered before putting them to use, normal
//quake only had 1 tempstring, causing many headaches.
//
//Note that for longer term storage (or compatibility on engines having
//FRIK_FILE but not this extension) the FRIK_FILE extension's
//strzone/strunzone builtins provide similar functionality (slower though).
//
//NOTE: this extension is superseded by DP_QC_UNLIMITEDTEMPSTRINGS

//DP_QC_UNLIMITEDTEMPSTRINGS
//idea: div0
//darkplaces implementation: LordHavoc
//description:
//this extension alters Quake behavior such that instead of reusing a single
//tempstring (or multiple) there are an unlimited number of tempstrings, which
//are removed only when a QC function invoked by the engine returns,
//eliminating almost all imaginable concerns with string handling in QuakeC.
//
//in short:
//you can now use and abuse tempstrings as much as you like, you still have to
//use strzone (FRIK_FILE) for permanent storage however.
//
//
//
//implementation notes for other engine coders:
//these tempstrings are expected to be stored in a contiguous buffer in memory
//which may be fixed size or controlled by a cvar, or automatically grown on
//demand (in the case of DarkPlaces).
//
//this concept is similar to quake's Zone system, however these are all freed
//when the QC interpreter returns.
//
//this is basically a poor man's garbage collection system for strings.

//DP_SV_SPAWNFUNC_PREFIX
//idea: div0
//darkplaces implementation: div0
//Make functions whose name start with spawnfunc_ take precedence as spawn function for loading entities.
//Useful if you have a field ammo_shells (required in any Quake mod) but want to support spawn functions called ammo_shells (like in Q3A).
//Optionally, you can declare a global "float require_spawnfunc_prefix;" which will require ANY spawn function to start with that prefix.
float require_spawnfunc_prefix;

//DP_QUAKE2_MODEL
//idea: quake community
//darkplaces implementation: LordHavoc
//description:
//shows that the engine supports Quake2 .md2 files.

//DP_QUAKE2_SPRITE
//idea: LordHavoc
//darkplaces implementation: Elric
//description:
//shows that the engine supports Quake2 .sp2 files.

//DP_QUAKE3_MAP
//idea: quake community
//darkplaces implementation: LordHavoc
//description:
//shows that the engine supports Quake3 .bsp files.

//DP_QUAKE3_MODEL
//idea: quake community
//darkplaces implementation: LordHavoc
//description:
//shows that the engine supports Quake3 .md3 files.

//DP_SND_DIRECTIONLESSATTNNONE
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//description:
//make sounds with ATTN_NONE have no spatialization (enabling easy use as music sources).

//DP_SND_FAKETRACKS
//idea: requested
//darkplaces implementation: Elric
//description:
//the engine plays sound/cdtracks/track001.wav instead of cd track 1 and so on if found, this allows games and mods to have music tracks without using ambientsound.
//Note: also plays .ogg with DP_SND_OGGVORBIS extension.

//DP_SND_OGGVORBIS
//idea: Transfusion
//darkplaces implementation: Elric
//description:
//the engine supports loading Ogg Vorbis sound files.  Use either the .ogg filename directly, or a .wav of the same name (will try to load the .wav first and then .ogg).

//DP_SND_STEREOWAV
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//description:
//the engine supports stereo WAV files.  (useful with DP_SND_DIRECTIONLESSATTNNONE for music)

//DP_SPRITE32
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//description:
//the engine supports .spr32 sprites.

//DP_SV_BOUNCEFACTOR
//idea: divVerent
//darkplaces implementation: divVerent
//field definitions:
.float bouncefactor; // velocity multiplier after a bounce
.float bouncestop; // bounce stops if velocity to bounce plane is < bouncestop * gravity AFTER the bounce
//description:
//allows qc to customize MOVETYPE_BOUNCE a bit

//DP_SV_CLIENTCOLORS
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//field definitions:
.float clientcolors; // colors of the client (format: pants + shirt * 16)
//description:
//allows qc to read and modify the client colors associated with a client entity (not particularly useful on other entities), and automatically sends out any appropriate network updates if changed

//DP_SV_CLIENTNAME
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//description:
//allows qc to modify the client's .netname, and automatically sends out any appropriate network updates if changed

//DP_SV_CUSTOMIZEENTITYFORCLIENT
//idea: LordHavoc
//darkplaces implementation: [515] and LordHavoc
//field definitions:
.float() customizeentityforclient; // self = this entity, other = client entity
//description:
//allows qc to modify an entity before it is sent to each client, the function returns TRUE if it should send, FALSE if it should not, and is fully capable of editing the entity's fields, this allows cloaked players to appear less transparent to their teammates, navigation markers to only show to their team, etc
//tips on writing customize functions:
//it is a good idea to return FALSE early in the function if possible to reduce cpu usage, because this function may be called many thousands of times per frame if there are many customized entities on a 64+ player server.
//you are free to change anything in self, but please do not change any other entities (the results may be very inconsistent).
//example ideas for use of this extension:
//making icons over teammates' heads which are only visible to teammates.  for exasmple: float() playericon_customizeentityforclient = {return self.owner.team == other.team;};
//making cloaked players more visible to their teammates than their enemies.  for example: float() player_customizeentityforclient = {if (self.items & IT_CLOAKING) {if (self.team == other.team) self.alpha = 0.6;else self.alpha = 0.1;} return TRUE;};
//making explosion models that face the viewer (does not work well with chase_active).  for example: float() explosion_customizeentityforclient = {self.angles = vectoangles(other.origin + other.view_ofs - self.origin);self.angles_x = 0 - self.angles_x;};
//implementation notes:
//entity customization is done before per-client culling (visibility for instance) because the entity may be doing setorigin to display itself in different locations on different clients, may be altering its .modelindex, .effects and other fields important to culling, so customized entities increase cpu usage (non-customized entities can use all the early culling they want however, as they are not changing on a per client basis).

//DP_SV_DRAWONLYTOCLIENT
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//field definitions:
.entity drawonlytoclient;
//description:
//the entity is only visible to the specified client.

//DP_SV_ENTITYCONTENTSTRANSITION
//idea: Dresk
//darkplaces implementation: Dresk
//field definitions:
//.void(float nOriginalContents, float nNewContents) contentstransition;
//description:
//This field function, when provided, is triggered on an entity when the contents (ie. liquid / water / etc) is changed.
//The first parameter provides the entities original contents, prior to the transition.  The second parameter provides the new contents.
//NOTE: If this field function is provided on an entity, the standard watersplash sound IS SUPPRESSED to allow for authors to create their own transition sounds.

//DP_SV_ONENTITYNOSPAWNFUNCTION
//idea: Dresk
//darkplaces implementation: Dresk
//engine-called QC prototypes:
//void() SV_OnEntityNoSpawnFunction;
//description:
// This function is called whenever an entity on the server has no spawn function, and therefore has no defined QC behavior.
// You may as such dictate the behavior as to what happens to the entity.
// To mimic the engine's default behavior, simply call remove(self).

//DP_SV_MODELFLAGS_AS_EFFECTS
//idea: LordHavoc, Dresk
//darkplaces implementation: LordHavoc
//field definitions:
.float modelflags;
//constant definitions:
float MF_ROCKET  =   1; // leave a trail
float MF_GRENADE =   2; // leave a trail
float MF_GIB     =   4; // leave a trail
float MF_ROTATE  =   8; // rotate (bonus items)
float MF_TRACER  =  16; // green split trail
float MF_ZOMGIB  =  32; // small blood trail
float MF_TRACER2 =  64; // orange split trail
float MF_TRACER3 = 128; // purple trail
//description:
//this extension allows model flags to be specified on entities so you can add a rocket trail and glow to any entity, etc.
//setting any of these will override the flags the model already has, to disable the model's flags without supplying any of your own you must use EF_NOMODELFLAGS.
//
//silly example modification #1 to W_FireRocket in weapons.qc:
//missile.effects = EF_NOMODELFLAGS; // rocket without a glow/fire trail
//silly example modification #2 to W_FireRocket in weapons.qc:
//missile.modelflags = MF_GIB; // leave a blood trail instead of glow/fire trail
//
//note: you can not combine multiple kinds of trail, only one of them will be active, you can combine MF_ROTATE and the other MF_ flags however, and using EF_NOMODELFLAGS along with these does no harm.
//
//note to engine coders: they are internally encoded in the protocol as extra EF_ flags (shift the values left 24 bits and send them in the protocol that way), so no protocol change was required (however 32bit effects is a protocol extension itself), within the engine they are referred to as EF_ for the 24bit shifted values.

//DP_SV_NETADDRESS
//idea: Dresk
//darkplaces implementation: Dresk
//field definitions:
.string netaddress;
//description:
// provides the netaddress of the associated entity (ie. 127.0.0.1) and "null/botclient" if the netconnection of the entity is invalid

//DP_SV_NODRAWTOCLIENT
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//field definitions:
.entity nodrawtoclient;
//description:
//the entity is not visible to the specified client.

//DP_SV_PING
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//field definitions:
.float ping;
//description:
//continuously updated field indicating client's ping (based on average of last 16 packet time differences).

//DP_SV_PUNCHVECTOR
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//field definitions:
.vector punchvector;
//description:
//offsets client view in worldspace, similar to view_ofs but all 3 components are used and are sent with at least 8 bits of fraction, this allows the view to be kicked around by damage or hard landings or whatever else, note that unlike punchangle this is not faded over time, it is up to the mod to fade it (see also DP_SV_PLAYERPHYSICS).

//DP_SV_PRECACHEANYTIME
//idea: id Software (Quake2)
//darkplaces implementation: LordHavoc
//description:
//this extension allows precache_model and precache_sound (and any variants) to be used during the game (with automatic messages to clients to precache the new model/sound indices), also setmodel/sound/ambientsound can be called without precaching first (they will cause an automatic precache).

//DP_SV_QCSTATUS
//idea: div0
//darkplaces implementation: div0
//1. A global variable
string worldstatus;
//Its content is set as "qcstatus" field in the rules.
//It may be at most 255 characters, and must not contain newlines or backslashes.
//2. A per-client field
.string clientstatus;
//It is sent instead of the "frags" in status responses.
//It should always be set in a way so that stof(player.clientstatus) is a meaningful score value. Other info may be appended. If used this way, the cvar sv_status_use_qcstatus may be set to 1, and then this value will replace the frags in "status".
//Currently, qstat does not support this and will not show player info if used and set to anything other than ftos(some integer).

//DP_SV_ROTATINGBMODEL
//idea: id Software
//darkplaces implementation: LordHavoc
//description:
//this extension merely indicates that MOVETYPE_PUSH supports avelocity, allowing rotating brush models to be created, they rotate around their origin (needs rotation supporting qbsp/light utilities because id ones expected bmodel entity origins to be '0 0 0', recommend setting "origin" key in the entity fields in the map before compiling, there may be other methods depending on your qbsp, most are more complicated however).
//tip: level designers can create a func_wall with an origin, and avelocity (for example "avelocity" "0 90 0"), and "nextthink" "99999999" to make a rotating bmodel without any qc modifications, such entities will be solid in stock quake but will not rotate)

//DP_SV_SLOWMO
//idea: LordHavoc
//darkplaces implementation: LordHavoc
//cvars:
//"slowmo" (0+, default 1)
//description:
//sets the time scale of the server, mainly intended for use in singleplayer by the player, however potentially useful for mods, so here's an extension for it.
//range is 0 to infinite, recommended values to try are 0.1 (very slow, 10% speed), 1 (normal speed), 5 (500% speed).

//NEXUIZ_PLAYERMODEL
//idea: Nexuiz
//darkplaces implementation: Black
//console commands:
//playermodel <name> - FIXME: EXAMPLE NEEDED
//playerskin <name> - FIXME: EXAMPLE NEEDED
//field definitions:
.string playermodel; // name of player model sent by client
.string playerskin; // name of player skin sent by client
//description:
//these client properties are used by Nexuiz.

//PRYDON_CLIENTCURSOR
//idea: FrikaC
//darkplaces implementation: LordHavoc
//field definitions:
//.float cursor_active; // true if cl_prydoncursor mode is on
//.vector cursor_screen; // screen position of cursor as -1 to +1 in _x and _y (_z unused)
//.vector cursor_trace_start; // position of camera
.vector cursor_trace_endpos; // position of cursor in world (as traced from camera)
.entity cursor_trace_ent; // entity the cursor is pointing at (server forces this to world if the entity is currently free at time of receipt)
//cvar definitions:
//cl_prydoncursor (0/1+, default 0, 1 and above use cursors named gfx/prydoncursor%03i.lmp - or .tga and such if DP_GFX_EXTERNALTEXTURES is implemented)
//description:
//shows that the engine supports the cl_prydoncursor cvar, this puts a clientside mouse pointer on the screen and feeds input to the server for the QuakeC to use as it sees fit.
//the mouse pointer triggers button4 if cursor is at left edge of screen, button5 if at right edge of screen, button6 if at top edge of screen, button7 if at bottom edge of screen.
//the clientside trace skips transparent entities (except those marked EF_SELECTABLE).
//the selected entity highlights only if EF_SELECTABLE is set, a typical selection method would be doubling the brightness of the entity by some means (such as colormod[] *= 2).
//intended to be used by Prydon Gate.

//TENEBRAE_GFX_DLIGHTS
//idea: Tenebrae
//darkplaces implementation: LordHavoc
//fields:
.float light_lev; // radius (does not affect brightness), typical value 350
.vector color; // color (does not affect radius), typical value '1 1 1' (bright white), can be up to '255 255 255' (nuclear blast)
.float style; // light style (like normal light entities, flickering torches or switchable, etc)
.float pflags; // flags (see PFLAGS_ constants)
.vector angles; // orientation of the light
.float skin; // cubemap filter number, can be 1-255 (0 is assumed to be none, and tenebrae only allows 16-255), this selects a projective light filter, a value of 1 loads cubemaps/1posx.tga and cubemaps/1negx.tga and posy, negy, posz, and negz, similar to skybox but some sides need to be rotated or flipped
//constants:
float PFLAGS_NOSHADOW = 1; // light does not cast shadows
float PFLAGS_CORONA = 2; // light has a corona flare
float PFLAGS_FULLDYNAMIC = 128; // light enable (without this set no light is produced!)
//description:
//more powerful dynamic light settings
//warning: it is best not to use cubemaps on a light entity that has a model, as using a skin number that a model does not have will cause issues in glquake, and produce warnings in darkplaces (use developer 1 to see them)
//changes compared to tenebrae (because they're too 'leet' for standards):
//note: networking should send entities with PFLAGS_FULLDYNAMIC set even if they have no model (lights in general do not have a model, nor should they)
//EF_FULLDYNAMIC effects flag replaced by PFLAGS_FULLDYNAMIC flag (EF_FULLDYNAMIC conflicts with EF_NODRAW)

//TW_SV_STEPCONTROL
//idea: Transfusion
//darkplaces implementation: LordHavoc
//cvars:
//sv_jumpstep (0/1, default 1)
//sv_stepheight (default 18)
//description:
//sv_jumpstep allows stepping up onto stairs while airborn, sv_stepheight controls how high a single step can be.

//DP_CON_BESTWEAPON
//idea: many
//darkplaces implementation: div0
//description:
//allows QC to register weapon properties for use by the bestweapon command, for mods that change required ammo count or type for the weapons
//it is done using console commands sent via stuffcmd:
//  register_bestweapon quake
//  register_bestweapon clear
//  register_bestweapon <shortname> <impulse> <itemcode> <activeweaponcode> <ammostat> <ammomin>
//for example, this is what Quake uses:
//  register_bestweapon 1 1 4096 4096 6 0 // STAT_SHELLS is 6
//  register_bestweapon 2 2    1    1 6 1
//  register_bestweapon 3 3    2    2 6 1
//  register_bestweapon 4 4    4    4 7 1 // STAT_NAILS is 7
//  register_bestweapon 5 5    8    8 7 1
//  register_bestweapon 6 6   16   16 8 1 // STAT_ROCKETS is 8
//  register_bestweapon 7 7   32   32 8 1
//  register_bestweapon 8 8   64   64 9 1 // STAT_CELLS is 9
//after each map client initialization, this is reset back to Quake settings. So you should send these data in ClientConnect.
//also, this extension introduces a new "cycleweapon" command to the user.

//DP_RM_CULLTRACEMODE
//idea: 802.1ad
//darkplaces implementation: 802.1ad
#define CULLTRACEMODE_PLAYER 1
#define CULLTRACEMODE_EXTRA 2
#define CULLTRACEMODE_SIMPLE 3
#define CULLTRACEMODE_NONE 4
.float culltracemode;
//description
//cull trace mode for entity

//DP_RM_CLIPGROUP
//idea: Akari
//darkplaces implementation: Akari
//field definitions:
.float clipgroup;
//description:
//If two entities have this field set to the same non-zero integer value, they won't collide with each other.

//DP_RM_EXISTSONLYFOR
.entity existsonlyfor;
