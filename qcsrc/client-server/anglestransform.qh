vector(vector transform, vector v) anglestransform_apply;
vector(vector t1, vector t2) anglestransform_multiply; // A B
vector(vector transform) anglestransform_invert;
vector(vector transform) anglestransform_turn_direction_fr;
vector(vector to_transform, vector from_transform) anglestransform_right_divide; // A B^-1
vector(vector t, float minimize_roll) anglestransform_normalize; // makes sure all angles are in their range: yaw in -180..180, pitch in -90..90, roll in -180..180 (or if minimize_roll is set, pitch in -180..180, roll in -90..90)
vector(vector transform, vector v) anglestransform_apply_to_angles;
vector(vector transform, vector v) anglestransform_apply_to_vangles;
// transformed = original * transform + postshift
vector(vector sf0, vector st0, vector t1, vector st1) anglestransform_multiply_get_post_shift;
vector(vector sf, vector t, vector st) anglestransform_pre_post_shift_get_post_shift;
vector(vector t) anglestransform_cancel_roll;
#if 0
vector(vector transform) anglestransform_turn_direction_fu;
vector(vector from_transform, vector to_transform) anglestransform_left_divide; // A^-1 B
#endif
