var float(entity attacker, entity inflictor, float deathtype) gamehook_player_death_handle = { return FALSE; }
var float() GameHookChain_SpeedMod = { return 1; }
var void(entity spot) GameHookChain_Spawn = {}
var void(float killed) GameHookChain_PlayerClear = {}
var float(entity attacker, entity targ, float f) GameHook_FragsHandle = { return f; }
float GameHookChain_PlayerDamageMod;
var float(entity inflictor, entity attacker, float damage, float deathtype, vector hitloc, vector force) GameHookChain_PlayerDamageHandle = { return FALSE; }
var float(entity plr, float wep) GameHookChain_PlayerCanFire = { return TRUE; }
var float() GameHook_PlayerAllowedToMove = { return TRUE; }
var void() GameHook_PhysicFrameBegin = {}
var void() GameHookChain_PlayerPreThink = {}
var entity() GameHook_SelectSpawnPoint = {
	entity spot;
	spot = spawn_select(FALSE);
	if not(spot)
		spot = spawn_select(TRUE);

	return spot;
}
var float(float fraglimit, float _leadlimit) gamehook_winning_condition = {
	if (world_check_rules_run_out_spawns()) {
		bprint("Hey! Someone ran out of spawns!\n");
		return TRUE;
	}
	return score_winning_condition(fraglimit, _leadlimit);
}
var float() GameHook_OvertimeHandle = { return FALSE; }
var float() GameHook_OvertimeAllowed = { return TRUE; }
var void() GameHook_Reset = {}
var void() GameHookChain_ObserverSpawn = {}
var void() GameHook_InitSpectator = {}
var float(entity spot) GameHook_SpawnPointGood = { return TRUE; }
var void(float frags_remain) stub_WinCountDown = {}
var void(float frags_remain) GameHook_WinCountDown = {
	if (frags_remain == 1)
		sound_play2all("announcer/robotic/1fragleft.wav");
	else if (frags_remain == 2)
		sound_play2all("announcer/robotic/2fragsleft.wav");
	else if (frags_remain == 3)
		sound_play2all("announcer/robotic/3fragsleft.wav");
}
var float(float f) GameHook_KillDelayMod = { return f; }
var string(string s) GameHook_SuddenDeathMessageMod = { return s; }
var string(string s) gamehook_map_finish_message_mod = { return s; }
var float() false_WarmupAllowed = { return FALSE; }
var float() GameHook_WarmupAllowed = { return TRUE; }
var float() GameHook_ReadyAllowed = { return FALSE; }
var float() GameHook_ClearScoreAllowed = { return TRUE; }
var float() GameHook_TelefragsAllowed = { return TRUE; }
var string() GameHook_FixClientCvars = { return ""; }
var string(string bspname) GameHook_RecordForMap = { return ""; }
var float() GameHook_ReadyRestartHard = { return FALSE; }
var float() gamehook_chain_weapon_frame_handle = { return FALSE; }
var float() GameHook_ReloadAllowed = { return TRUE; }
var float(float dropped) GameHookChain_ThrowWeaponAllowed = { return TRUE; }
var void(entity e) GameHookChain_SpectateCopy = {}
float GameHook_DamageMod;
float GameHook_ForceMod;
float GameHook_MirrorDamageMod;
float GameHook_MirrorForceMod;
var void(entity targ, entity attacker, float deathtype) GameHookChain_DamageForceModsSet = {}
var void(void(string item, string cmd) Add_Item) GameHookChain_GameMenuAddItems = {};
var float(string cmd, float tokens) GameHookChain_ClientCommandHandle = { return FALSE; }
var float(string cmd, float tokens) GameHookChain_GameCommandHandle = { return FALSE; }
var void() GameHookChain_EntityPreSpawn = {};
float GameHook_HealthMaxMod;
float GameHook_ArmorHealthLimitMod;
float GameHook_RegenMod;
float GameHook_RotMod;
float GameHook_HealthArmorRotRegen;
var void() GameHookChain_HealthArmorFuelModsSet = {}
var float() GameHookChain_JumpVelocityMod = { return 1; }
var float() GameHookChain_WeaponRateFactor = { return 1; }
var void(entity targ, entity attacker, float damage, vector force) GameHookChain_DamageForceDone = {}
var void(entity attacker) gamehook_monster_killed {}
var float() GameHook_MonsterQuant { return 1; }
var float(entity plr, entity viewer, float palpha) GameHookChain_PlayerAlphaMod = { return palpha; }
var float(float secondary, float attacktime) GameHookChain_WeaponPrepareAttack = { return TRUE; }
var float(entity item, entity player) GameHookChain_ItemGiveToHandle = { return FALSE; }
float GameHookChain_ItemGiveToHandle_PickedUp;
float GameHookChain_ItemGiveToHandle_SwitchWeapon;
var float(float wpn) GameHookChain_WeaponSpawnHandle = { return FALSE; }
var void() GameHookChain_RealClientConnect = {}
var void() GameHookChain_ClientConnect = {}
var void() GameHookChain_RealClientDisconnect = {}
var void() GameHookChain_ServerFrame = {}
var float() GameHookChain_ItemForbidden = { return FALSE; }
var void() gamehook_chain_player_effects = {}
var float(float c) GameHookChain_PlayerColorsMod = { return c; }
var float() GameHookChain_JoinHandle = { return FALSE; }
var float(entity attacker, entity inflictor, float mirrordamage, vector force) GameHookChain_MirrorDamageHandle = { return FALSE; }
var float(entity plr) GameHook_PlayerIsCarrier { return FALSE; }
var void(entity plr) GameHook_DropCarried {}
var float(entity plr) GameHookChain_PlayerCanBeCarrier { return TRUE; }
var float(entity e) GameHook_TeleportationForbiddenFor { return FALSE; }
string GameHook_ItemName;
vector GameHook_ItemColor;
var void() GameHookChain_ItemRespawnCountDown {}
var float() GameHookChain_ArmorBlockPercentMod { return 1; }
var float(entity plr, entity targ) GameHookChain_PlayerCanSeeHealthFor { return FALSE; }
var float(entity plr, entity targ) GameHookChain_PlayerVisibleThroughWallFor { return FALSE; }
var float() GameHookChain_ThrowWeaponHandle { return FALSE; }
var void(entity source, string msg) GameHookChain_PublicPlayerChat = {}
var void() GameHook_BotChooseRole = { havocbot_chooserole_dm(); }
var void() gamehook_client_parms_new = {}
var void() gamehook_client_parms_change = {}
var void() gamehook_client_parms_decode = {}
var float(void) gamehook_forbid_specatators = { return FALSE; }
var float(void) gamehook_chain_player_equip_handle = { return FALSE; }
var float(void) gamehook_map_restart = { return FALSE; }
var float() gamehook_monster_team_switchable = { return TRUE; }
var void() GameHookChain_Shutdown = {}
var float(float tempo) GameHookChain_TempoMod = { return tempo; }
var float() GameHookChain_ThrowWeaponOnDeathHandle = { return FALSE; }
var float() GameHookChain_ProjectileTouchHandle = { return FALSE; }
var float(float f) GameHookChain_SwitchWeaponMod = { return f; }
var entity(entity pl) gamehook_chain_player_entity = { return pl; }
var float(void) gamehook_chain_bot_aim = { return FALSE; }
var float(float deathtype, entity targ, entity inflictor, entity attacker) gamehook_chain_player_obituary_frag = { return FALSE; }
