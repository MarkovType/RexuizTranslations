// VorteX: static frame globals
enum {
	WEAPON_FRAME_DONTCHANGE = -1,
	WEAPON_FRAME_FIRE1,
	WEAPON_FRAME_FIRE2,
	WEAPON_FRAME_IDLE,
	WEAPON_FRAME_RELOAD,
	WEAPON_FRAME_MELEE,
	WEAPON_FRAME_MELEE2,
};

enum: flag {
	WEAPON_FLAG_NORMAL,
	WEAPON_FLAG_CANCLIMB,
	WEAPON_FLAG_HIDDEN,
};

float g_weaponspeedfactor;

vector weapon_shotorg;
vector weapon_shotdir;
vector weapon_shotpoint;
vector weapon_shotorg_visual;
string weapon_deathtypestring;
string weapon_fragprefix;
float weapon_deathtype;
entity weapon_spawn_chain;
string weapon_priority_by_order;
string weapon_priority_by_impulse;

.entity weaponentity;
.entity exteriorweaponentity;
.float switchweapon;
.float autoswitch;
// VorteX: standalone think for weapons, so normal think on weaponentity can be reserved by weaponflashes (which needs update even player dies)
.float weapon_nextthink;
.void(void) weapon_think;

// weapon states (self.weaponentity.state)
enum {
	WEAPON_STATE_CLEAR = 0, // no weapon selected
	WEAPON_STATE_RAISE, // raise frame
	WEAPON_STATE_DROP, // deselecting frame
	WEAPON_STATE_INUSE, // fire state
	WEAPON_STATE_READY, // idle frame
};

// weapon requests
enum {
	WEAPON_REQUEST_SETUP = 1, // setup weapon data
	WEAPON_REQUEST_THINK, // logic to run every frame
	WEAPON_REQUEST_CHECKAMMO1, // checks ammo for weapon
	WEAPON_REQUEST_CHECKAMMO2, // checks ammo for weapon
	WEAPON_REQUEST_AIM, // runs bot aiming code for this weapon
	WEAPON_REQUEST_PRECACHE, // precaches models/sounds used by this weapon
	WEAPON_REQUEST_SUICIDEMESSAGE, // sets w_deathtypestring or leaves it alone (and may inspect w_deathtype for details)
	WEAPON_REQUEST_KILLMESSAGE, // sets w_deathtypestring or leaves it alone
	WEAPON_REQUEST_RELOAD, // does not need to do anything
	WEAPON_REQUEST_RESETPLAYER, // does not need to do anything
	WEAPON_REQUEST_CLEAR, // clear resources used by this weapon
	WEAPON_REQUEST_CVAR_CACHE, // update cvar cache
};

.string weaponname;
.float wframe;
.vector shotorg_visual;
.string model2; // wpn- sprite name
.float attack_finished_for[WEAPON_COUNT];
.float attack_finished_single;
#define WEAPON_ATTACK_FINISHED_FOR(ent,w) ((ent).(attack_finished_for[(w) - WEAPON_FIRST]))
#define WEAPON_ATTACK_FINISHED(ent) WEAPON_ATTACK_FINISHED_FOR(ent,(ent).weapon)

void(float wpn) weapon_defaultspawnfunc;
float(float wpn, float wrequest) weapon_action;
void(entity e, float wep, string name) weapon_give;
void(float windex) weapon_setup;
void(entity flash, vector offset) weapon_attach_to_shotorg;
float(void) weapon_rate_factor;
float(entity o) weapon_rate_factor_for;
void(void) weapon_clear;
float(void) weapon_model_customize;
void(void) weapon_ready;
void(entity missile) weapon_setup_projectile_velocity;
vector(vector vecs, float y_is_right, float visual, float akimbo_active) weapon_shotorg_adjust;
#define weapon_setup_shot(ent,recoil,snd,maxhits) weapon_setup_shotdir(ent, v_forward, recoil, snd, maxhits)
void(entity ent, vector s_forward, float recoil, string snd, float maxhits) weapon_setup_shotdir;
void(float r) weapon_shake;
float(entity e) weapon_best;
float(float w) weapon_throwable;
string(entity own, float wpn, float doreduce, vector org, vector velo) weapon_throw_new;
void(float wpn) weapon_precache;
void(entity pl) weapon_show_list;
void(entity e, float w) weapon_switch_force;
string(float weaponid) weapon_name;
void(float imp) weapon_switch;
void(float fr, float t, void() func) weapon_thinkf;
float(float secondary, float attacktime) weapon_prepareattack;
void(void) weapon_ready;
void(void) weapon_init;
float weapon_spawned_list;
float weapon_spawned_extra_list;
#define WEAPON_VALID(w) ((w) >= WEAPON_FIRST && (w) <= WEAPON_LAST_EXTRA)
float(entity cl, float wpn, float andammo, float complain) weapon_carried;
void(void) weapon_priority_update;
void(float id,
		float(float) func,
		float ammotype,
		float i,
		float normalweapon, float canclimb, float pickupbasevalue,
		string modelname, string shortname, string wname) weapon_register;
float(float wr) weapon_dummy_func;
float(float wr) weapon_laser;
float(float wr) weapon_shotgun;
float(float wr) weapon_uzi;
float(float wr) weapon_grenadelauncher;
float(float wr) weapon_electro;
float(float wr) weapon_crylink;
float(float wr) weapon_nex;
float(float wr) weapon_hagar;
float(float wr) weapon_rocketlauncher;
float(float wr) weapon_hook;
float(float wr) weapon_chainsaw;
float(float wr) weapon_tuba;
float(float wr) weapon_hlac;
float(float wr) weapon_campingrifle;
float(float wr) weapon_zapper;
float(float wr) weapon_minstanex;
float(float wr) weapon_supershotgun;
float(float wr) weapon_fireball;
float(float wr) weapon_porto;
