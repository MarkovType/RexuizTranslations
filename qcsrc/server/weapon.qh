// VorteX: static frame globals
float WFRAME_DONTCHANGE = -1;
float WFRAME_FIRE1 = 0;
float WFRAME_FIRE2 = 1;
float WFRAME_IDLE = 2;
float WFRAME_RELOAD = 3;
float WFRAME_MELEE = 4;
float WFRAME_MELEE2 = 5;

#define WEPSPAWNFLAG_NORMAL 1
#define WEPSPAWNFLAG_CANCLIMB 2
#define WEPSPAWNFLAG_HIDDEN 4

float g_weaponspeedfactor;

vector weapon_shotorg;
vector weapon_shotdir;
vector weapon_shotpoint;
vector weapon_shotorg_visual;
string weapon_deathtypestring;
string weapon_fragprefix;
float weapon_deathtype;
entity weapon_spawn_chain;
string weapon_priority_by_order;
string weapon_priority_by_impulse;

.entity weaponentity;
.entity exteriorweaponentity;
.float switchweapon;
.float autoswitch;
// VorteX: standalone think for weapons, so normal think on weaponentity can be reserved by weaponflashes (which needs update even player dies)
.float weapon_nextthink;
.void(void) weapon_think;

// weapon states (self.weaponentity.state)
float WS_CLEAR			= 0; // no weapon selected
float WS_RAISE			= 1; // raise frame
float WS_DROP			= 2; // deselecting frame
float WS_INUSE			= 3; // fire state
float WS_READY			= 4; // idle frame

// weapon requests
float WR_SETUP		    = 1; // setup weapon data
float WR_THINK		    = 2; // logic to run every frame
float WR_CHECKAMMO1	    = 3; // checks ammo for weapon
float WR_CHECKAMMO2	    = 4; // checks ammo for weapon
float WR_AIM		    = 5; // runs bot aiming code for this weapon
float WR_PRECACHE	    = 6; // precaches models/sounds used by this weapon
float WR_SUICIDEMESSAGE = 7; // sets w_deathtypestring or leaves it alone (and may inspect w_deathtype for details)
float WR_KILLMESSAGE    = 8; // sets w_deathtypestring or leaves it alone
float WR_RELOAD         = 9; // does not need to do anything
float WR_RESETPLAYER    = 10; // does not need to do anything
float WR_CLEAR          = 11; // clear resources used by this weapon
float WR_CVAR_CACHE     = 12; // update cvar cache


.string weaponname;
.float wframe;
.vector shotorg_visual;
.string model2; // wpn- sprite name

void(float wpn) weapon_defaultspawnfunc;
float(float wpn, float wrequest) weapon_action;
void(entity e, float wep, string name) weapon_give;
void(float windex) weapon_setup;
void(entity flash, vector offset) weapon_attach_to_shotorg;
float(void) weapon_rate_factor;
float(entity o) weapon_rate_factor_for;
void(void) weapon_clear;
float(void) weapon_model_customize;
void(void) weapon_ready;
void(entity missile) weapon_setup_projectile_velocity;
vector(vector vecs, float y_is_right, float visual, float akimbo_active) weapon_shotorg_adjust;
#define weapon_setup_shot(ent,recoil,snd,maxhits) weapon_setup_shotdir(ent, v_forward, recoil, snd, maxhits)
void(entity ent, vector s_forward, float recoil, string snd, float maxhits) weapon_setup_shotdir;
void(float r) weapon_shake;
float(entity e) weapon_best;
float(float w) weapon_throwable;
string(entity own, float wpn, float doreduce, vector org, vector velo) weapon_throw_new;
void(float wpn) weapon_precache;
void(entity pl) weapon_show_list;
void(entity e, float w) weapon_switch_force;
string(float weaponid) weapon_name;
void(float imp) weapon_switch;
void(float fr, float t, void() func) weapon_thinkf;
float(float secondary, float attacktime) weapon_prepareattack;
void(void) weapon_ready;
void(void) weapon_init;
float weapon_spawned_list;
float weapon_spawned_extra_list;
#define WEAPON_VALID(w) ((w) >= WEP_FIRST && (w) <= WEP_LAST_EXTRA)
entity(string s) weapon_info_by_name;
float(entity cl, float wpn, float andammo, float complain) weapon_carried;
void(void) weapon_priority_update;
float(float wr) weapon_laser;
float(float wr) weapon_shotgun;
float(float wr) weapon_uzi;
float(float wr) weapon_grenadelauncher;
float(float wr) weapon_electro;
float(float wr) weapon_crylink;
float(float wr) weapon_nex;
float(float wr) weapon_hagar;
float(float wr) weapon_rocketlauncher;
float(float wr) weapon_hook;
float(float wr) weapon_chainsaw;
float(float wr) weapon_tuba;
float(float wr) weapon_hlac;
float(float wr) weapon_campingrifle;
float(float wr) weapon_zapper;
float(float wr) weapon_minstanex;
float(float wr) weapon_supershotgun;
float(float wr) weapon_fireball;
float(float wr) weapon_porto;
