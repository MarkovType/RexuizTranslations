enum {
	ENT_CLIENT = 0,
	ENT_CLIENT_DEAD,
	ENT_CLIENT_ENTCS,
	ENT_CLIENT_SCORES_INFO,
	ENT_CLIENT_SCORES,
	ENT_CLIENT_TEAMSCORES,
	ENT_CLIENT_POINTPARTICLES,
	ENT_CLIENT_RAINSNOW,
	ENT_CLIENT_LASER,
	ENT_CLIENT_NAGGER,
	ENT_CLIENT_WAYPOINT,
	ENT_CLIENT_RADARLINK,
	ENT_CLIENT_PROJECTILE,
	ENT_CLIENT_GIBSPLASH,
	ENT_CLIENT_DAMAGEINFO,
	ENT_CLIENT_CASING,
	ENT_CLIENT_INIT,
	ENT_CLIENT_MAPVOTE,
	ENT_CLIENT_RANDOMSEED,
	ENT_CLIENT_WALL,
	//ENT_CLIENT_SPIDERBOT,
	ENT_CLIENT_MODELEFFECT,
	ENT_CLIENT_PHYSICS,
	ENT_CLIENT_MENU,
	ENT_CLIENT_PROGRESSBAR,
	ENT_CLIENT_PHYSICS_SPIDERBOT,
	ENT_CLIENT_PHYSICS_AIRCRAFT,
	ENT_CLIENT_PHYSICS_CAR,
	ENT_CLIENT_PHYSICS_JETPACK,
	ENT_CLIENT_PHYSICS_HOOK,
	ENT_CLIENT_GAMESTATUS,
	ENT_CLIENT_LOCATION_REQUEST,
	ENT_CLIENT_DLC_LIST,
	ENT_CLIENT_ZAPPER_SHIELD,
	ENT_CLIENT_ZAPPER,
	ENT_CLIENT_INIT_IP2C,
	ENT_CLIENT_DMG_INDICATOR,
	//ENT_CLIENT_TURRET,
	ENT_CLIENT_WARPZONE_TELEPORTED,
	ENT_CLIENT_WARPZONE,
	ENT_CLIENT_FUNC_CAMERA,
	ENT_CLIENT_NOTELINE,
	ENT_CLIENT_HOOK,
	ENT_CLIENT_DLC_SOUND,
	ENT_CLIENT_LMS_SPHERE,
	ENT_CLIENT_ICE,
	ENT_CLIENT_COUNT,
};

const float AS_STRING		= 1;
const float AS_INT		= 2;
const float AS_FLOAT_TRUNCATED	= 2;
const float AS_FLOAT		= 8;

enum {
	TE_CSQC_PICTURE = 100,
	TE_CSQC_RACE,
	TE_CSQC_ZCURVEPARTICLES,
	TE_CSQC_NEXGUNBEAMPARTICLE,
	TE_CSQC_LIGHTNINGARC,
	TE_CSQC_BIGLIGHTNINGARC,
	TE_CSQC_ZAPPERLIGHTNING,
	TE_CSQC_NADGETSELECT,
    TE_CSQC_BLAST,
	TE_CSQC_RADIO,
	TE_CSQC_WEAPONLIST,
	TE_CSQC_WEAPONSELECT,
	TE_CSQC_TEAMSELECT,
	TE_CSQC_GAMEOVER,
	TE_CSQC_MAPLIST,
	TE_CSQC_TRIP,
	TE_CSQC_ANNOUNCE_PRINT,
	TE_CSQC_HINT,
	TE_CSQC_HIT,
};



const float SPRITERULE_DEFAULT = 0;
const float SPRITERULE_TEAMPLAY = 1;

const float RADARICON_FLAG = 1;
const float RADARICON_FLAGCARRIER = 1;
const float RADARICON_HERE = 1; // TODO make these 3 and 4, and make images for them
const float RADARICON_DANGER = 1;
const float RADARICON_WAYPOINT = 1;
const float RADARICON_HELPME = 1;
const float RADARICON_CONTROLPOINT = 1;
const float RADARICON_GENERATOR = 1;
const float RADARICON_OBJECTIVE = 1;
const float RADARICON_DOMPOINT = 1;
const float RADARICON_POWERUP = 1;

///////////////////////////
// csqc communication stuff

enum {
	STAT_KH_KEYS = 32,
	STAT_WEAPONS,
	STAT_SWITCHWEAPON,
	STAT_GAMESTARTTIME,
	STAT_STRENGTH_FINISHED,
	STAT_INVINCIBLE_FINISHED,
	STAT_SPEED_FINISHED,
	STAT_INVISIBILITY_FINISHED,
	STAT_DAMAGE_HITS, // Used by the weapon stats code, represents the total amount of damage done to other players
	STAT_DAMAGE_FIRED, // Used by the weapon stats code, represents the total amount of potential damage fired
	STAT_PRESSED_KEYS,
	STAT_FUEL,
	STAT_NB_METERSTART,
	STAT_LEADLIMIT,
	STAT_BULLETS_LOADED,
	STAT_HUD,
	STAT_PLAYER_STATE,
	STAT_STEALTH,
	STAT_STEALTH_SAVED,
    STAT_HGTYPE,
    STAT_HGAMMO,
    STAT_HGREFIRE,
    STAT_HGREGEN,
    STAT_HGREGENMAX,
    STAT_HGREGENPAUSED,
    STAT_HGREGENRATE,

    STAT_HGTYPE2,
    STAT_HGAMMO2,
    STAT_HGREFIRE2,
    STAT_HGREGEN2,
    STAT_HGREGENMAX2,
    STAT_HGREGENPAUSED2,
    STAT_HGREGENRATE2,

    STAT_HGBONUS,
    STAT_HGBONUSTYPE,
    STAT_HGDETONABLES,
    STAT_HGFORCE,
    STAT_HGLAUNCH,

    STAT_HGSHIELDSTORE,
    STAT_HGSHIELDSTOREMAX,
    STAT_HGSHIELD,
    STAT_HGSHIELDPOWER,
    STAT_HGSHIELDDAMAGEPERSHOT,

    //STAT_HGTWARP_EXPIRETIME,
    //STAT_HGTWARP_WARPTIME
	STAT_RUNES,
	STAT_SPIDERBOT_HEALTH,
	STAT_SPIDERBOT_ROCKETS,
	STAT_SPIDERBOT_HEAT,
	STAT_SPIDERBOT_RELOAD,
	STAT_SPIDERBOT_ENERGY,
	STAT_SPIDERBOT_SHIELD,

	STAT_SPECSTATUS,
};

const float HUD_NORMAL = 0;
const float HUD_SPIDERBOT = 10;

// moved that here so the client knows the max.
// # of maps, I'll use arrays for them :P
#define MAPVOTE_COUNT 10

#define MENU_ITEMS_MAXCOUNT 10

/**
 * Lower scores are better (e.g. suicides)
 */
#define SFL_LOWER_IS_BETTER     1

/**
 * Don't show zero values as scores
 */
#define SFL_HIDE_ZERO           2

/**
 * Allow a column to be hidden (do not automatically add it even if it is a sorting key)
 */
#define SFL_ALLOW_HIDE         16

/**
 * Display as a rank (with st, nd, rd, th suffix)
 */
#define SFL_RANK               32

/**
 * Display as mm:ss.s, value is stored as 10ths of a second (AND 0 is the worst possible value!)
 */
#define SFL_TIME               64

// not an extra constant yet
#define SFL_ZERO_IS_WORST SFL_TIME

/**
 * Scoring priority (NOTE: PRIMARY is used for fraglimit)
 */
#define SFL_SORT_PRIO_SECONDARY 4
#define SFL_SORT_PRIO_PRIMARY   8
#define SFL_SORT_PRIO_MASK     12
#define SFL_NOCLEAR            16
#define MAX_SCORE 16
#define MAX_TEAMSCORE 2

// this sets sounds and other properties of the projectiles in csqc
enum {
	PROJECTILE_BEGIN_LIST,

	PROJECTILE_BULLET,
	PROJECTILE_BULLET_BIG,
	PROJECTILE_BULLET_GLOWING,
	PROJECTILE_CRYLINK,
	PROJECTILE_CRYLINK_BOUNCING,
	PROJECTILE_ELECTRO,
	PROJECTILE_ELECTRO_BEAM,
	PROJECTILE_FIREBALL,
	PROJECTILE_FIREMINE,
	PROJECTILE_GRENADE,
	PROJECTILE_GRENADE_BOUNCING,
	PROJECTILE_HAGAR,
	PROJECTILE_HAGAR_BOUNCING,
	PROJECTILE_HLAC,
	PROJECTILE_HOOKBOMB,
	PROJECTILE_LASER,
	PROJECTILE_PORTO_BLUE,
	PROJECTILE_PORTO_RED,
	PROJECTILE_ROCKET,

	PROJECTILE_HG_GENERIC,
	PROJECTILE_HG_LASER,
	PROJECTILE_HG_NAPALM,
	PROJECTILE_HG_NAPALMSHARD,
	PROJECTILE_HG_PLASMA,
	PROJECTILE_HG_PLASMA_SHARD,
	PROJECTILE_HG_RAZE,
	PROJECTILE_HG_REMOTE,
	PROJECTILE_HG_TRANSLOC,

	PROJECTILE_RM_LASER,

	PROJECTILE_END_LIST
};

// NOTE: limited to 255 projectiles. if that's ever seriously a problem, change the ProjInfo protocol.
const float NUM_PROJECTILES = PROJECTILE_END_LIST - 1;

float SPECIES_HUMAN        =  0;
float SPECIES_ROBOT_SOLID  =  1;
float SPECIES_ALIEN        =  2;
float SPECIES_ANIMAL       =  3;
float SPECIES_ROBOT_RUSTY  =  4;
float SPECIES_ROBOT_SHINY  =  5;
float SPECIES_RESERVED     = 15;

// Deathtypes (weapon deathtypes are the IT_* constants below)
// NOTE: when adding death types, please add an explanation to Docs/spamlog.txt too.
float DEATH_SPECIAL_START = 10000;
float DEATH_FALL = 10000;
float DEATH_DROWN = 10002;
float DEATH_HURTTRIGGER = 10003;
float DEATH_LAVA = 10004;
float DEATH_SLIME = 10005;
float DEATH_KILL = 10006;
float DEATH_NOAMMO = 10007;
float DEATH_SWAMP = 10008;
float DEATH_TEAMCHANGE = 10009;
float DEATH_AUTOTEAMCHANGE = 10010;
float DEATH_ROT = 10013;
float DEATH_MIRRORDAMAGE = 10014;
float DEATH_FIRE = 10017;
float DEATH_RESOURCE_ARMOR = 10018;
float DEATH_TURRET = 10100;

float DEATH_WEAPONMASK = 0xFF;
float DEATH_HITTYPEMASK = 0x1F00; // which is WAY below 10000 used for normal deaths
float HITTYPE_SECONDARY = 0x100;
float HITTYPE_SPLASH = 0x200;
float HITTYPE_BOUNCE = 0x400;
float HITTYPE_HEADSHOT = 0x800;
float HITTYPE_NOINFO = 0x800; //trick for damage_radius()
float HITTYPE_NOTEAMDAMAGE = 0x1000;

// macros to access these
#define DEATH_ISSPECIAL(t)            ((t) >= DEATH_SPECIAL_START)
#define DEATH_WEAPONOFWEAPONDEATH(t)  ((t) & DEATH_WEAPONMASK)
#define DEATH_ISWEAPON(t,w)           (!DEATH_ISSPECIAL(t) && DEATH_WEAPONOFWEAPONDEATH(t) == (w))
#define DEATH_WEAPONOF(t)             (DEATH_ISSPECIAL(t) ? 0 : DEATH_WEAPONOFWEAPONDEATH(t))
#define WEP_VALID(w)                  ((w) >= WEP_FIRST && (w) <= WEP_LAST)

//misc. stuff
#define NEWLINES "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"

// water levels
float WATERLEVEL_NONE = 0;
float WATERLEVEL_WETFEET = 1;
float WATERLEVEL_SWIMMING = 2;
float WATERLEVEL_SUBMERGED = 3;

float MAX_SHOT_DISTANCE = 32768;

float	FL_FLY					= 1;
float	FL_SWIM					= 2;
float	FL_CLIENT				= 8;
float	FL_INWATER				= 16;
float	FL_MONSTER				= 32;
float	FL_GODMODE				= 64;
float	FL_NOTARGET				= 128;
float	FL_ITEM					= 256;
float	FL_ONGROUND				= 512;
float	FL_PARTIALGROUND			= 1024;
float	FL_WATERJUMP				= 2048;
float	FL_JUMPRELEASED				= 4096;
float	FL_WEAPON				= 8192;
float	FL_POWERUP				= 16384;
float	FL_PROJECTILE				= 32768;
float	FL_TOSSED				= 65536;
float   FL_NO_WEAPON_STAY       = 131072;
float   FL_SPAWNING       = 262144;
float   FL_SLICK				= 524288;
float   FL_ONGROUND_OR_SLICK	= 524800;

float	DEAD_NO					= 0;
float	DEAD_DYING				= 1;
float	DEAD_DEAD				= 2;
float	DEAD_RESPAWNABLE			= 3;
float	DEAD_RESPAWNING			= 4;
float	DEAD_FREEZE      = 5;
float	DEAD_SPEC        = 6;

float Q3SURFACEFLAG_NODAMAGE = 1;
float Q3SURFACEFLAG_SLICK = 2; // low friction surface
float Q3SURFACEFLAG_SKY = 4; // sky surface (also has NOIMPACT and NOMARKS set)
float Q3SURFACEFLAG_LADDER = 8; // climbable surface
float Q3SURFACEFLAG_NOIMPACT = 16; // projectiles should remove themselves on impact (this is set on sky)
float Q3SURFACEFLAG_NOMARKS = 32; // projectiles should not leave marks, such as decals (this is set on sky)
float Q3SURFACEFLAG_FLESH = 64; // projectiles should do a fleshy effect (blood?) on impact
//float Q3SURFACEFLAG_NODRAW = 128; // compiler hint (not important to qc)
//float Q3SURFACEFLAG_HINT = 256; // compiler hint (not important to qc)
//float Q3SURFACEFLAG_SKIP = 512; // compiler hint (not important to qc)
//float Q3SURFACEFLAG_NOLIGHTMAP = 1024; // compiler hint (not important to qc)
//float Q3SURFACEFLAG_POINTLIGHT = 2048; // compiler hint (not important to qc)
float Q3SURFACEFLAG_METALSTEPS = 4096; // walking on this surface should make metal step sounds
float Q3SURFACEFLAG_NOSTEPS = 8192; // walking on this surface should not make footstep sounds
float Q3SURFACEFLAG_NONSOLID = 16384; // compiler hint (not important to qc // in real world important)
//float Q3SURFACEFLAG_LIGHTFILTER = 32768; // compiler hint (not important to qc)
//float Q3SURFACEFLAG_ALPHASHADOW = 65536; // compiler hint (not important to qc)
//float Q3SURFACEFLAG_NODLIGHT = 131072; // compiler hint (not important to qc)
//float Q3SURFACEFLAG_DUST = 262144; // translucent 'light beam' effect (not important to qc)

const float M_PI = 3.14159265358979323846;
#define RM_SOUND_LASER_SECONDARY "weapons/rm_laser2.wav"
#define RM_SOUND_LASER_PRIMARY "weapons/rm_laser1.wav"

float COLOR_TEAM1	= 5;  // red
float COLOR_TEAM2	= 14; // blue
float COLOR_TEAM3	= 13; // yellow
float COLOR_TEAM4	= 10; // pink

float MOVETYPE_NONE = 0;
float MOVETYPE_ANGLENOCLIP = 1;
float MOVETYPE_ANGLECLIP = 2;
float MOVETYPE_WALK = 3;
float MOVETYPE_STEP = 4;
float MOVETYPE_FLY = 5;
float MOVETYPE_TOSS = 6;
float MOVETYPE_PUSH = 7;
float MOVETYPE_NOCLIP = 8;
float MOVETYPE_FLYMISSILE = 9;
float MOVETYPE_BOUNCE = 10;
float MOVETYPE_BOUNCEMISSILE = 11; // Like bounce but doesn't lose speed on bouncing
float MOVETYPE_FOLLOW = 12; // 'Attaches' the entity to its aim_ent
float MOVETYPE_QCWALK = 128;
