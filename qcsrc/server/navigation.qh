/*
 * Globals and Fields
 */

float navigation_bestrating;
float bot_navigation_movemode;

vector stepheightvec;

entity navigation_bestgoal;

// stack of current goals (the last one of which may be an item or other
// desirable object, the rest are typically waypoints to reach it)
.entity goalcurrent, goalstack01, goalstack02, goalstack03;
.entity goalstack04, goalstack05, goalstack06, goalstack07;
.entity goalstack08, goalstack09, goalstack10, goalstack11;
.entity goalstack12, goalstack13, goalstack14, goalstack15;
.entity goalstack16, goalstack17, goalstack18, goalstack19;
.entity goalstack20, goalstack21, goalstack22, goalstack23;
.entity goalstack24, goalstack25, goalstack26, goalstack27;
.entity goalstack28, goalstack29, goalstack30, goalstack31;
.entity nearestwaypoint;

.float nearestwaypointtimeout;
.float navigation_hasgoals;

.entity navigation_jetpack_goal;
.vector navigation_jetpack_point;

#ifdef DEBUG_TRACEWALK
float DEBUG_NODE_SUCCESS        = 1;
float DEBUG_NODE_WARNING        = 2;
float DEBUG_NODE_FAIL           = 3;
vector debuglastnode;
#endif

/*
 * Functions
 */

#ifdef DEBUG_TRACEWALK
void debugresetnodes();
void debugnode(vector node);
void debugnodestatus(vector position, float status);
#endif

#ifdef DEBUG_BOT_GOALSTACK
void debuggoalstack();
#endif

float navigation_markroutes_nearestwaypoints(entity waylist, float maxdist);
float navigation_routetogoal(entity e, vector startposition);

void(void) navigation_clearroute;
void(entity e) navigation_pushroute;
void(void) navigation_poproute;
void(entity w, entity wp, float cost2) navigation_markroutes_checkwaypoint;
void(entity fixed_source_waypoint) navigation_markroutes;
void(entity fixed_source_waypoint) navigation_markroutes_inverted;
void(entity e, float f, float rangebias) navigation_routerating;
void(void) navigation_poptouchedgoals;
void(void) navigation_goalrating_start;
void(void) navigation_goalrating_end;
entity(entity ent, float walkfromwp) navigation_findnearestwaypoint;
void(void) navigation_init;
void(entity e) navigation_teleported;
