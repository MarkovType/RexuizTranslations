.vector(vector, vector) camera_transform;
.vector warpzone_shift;
.vector warpzone_origin;
.vector warpzone_angles;
.vector warpzone_forward;
.vector warpzone_targetorigin;
.vector warpzone_targetangles;
.vector warpzone_targetforward;
.vector warpzone_transform;
void(entity e, vector my_org, vector my_ang, vector other_org, vector other_ang) warpzone_setup;
float(vector mi, vector ma, entity e, entity ig) warpzone_box_touches_brush;

entity(vector mi, vector ma) warpzone_find;
void() warpzone_make_all_solid;
void() warpzone_make_all_other;

typedef void(vector start, vector hit, vector end) warpzone_trace_callback_t; // called on every elementary trace
entity warpzone_trace_transform; // transform accumulator during a trace
vector warpzone_trace_dir;
float warpzone_trace_warpcount;
var void(vector org, vector min, vector max, vector end, float nomonsters, entity forent) warpzone_trace_box;
var void(vector org, vector min, vector max, vector end, float nomonsters, entity forent, entity zone, warpzone_trace_callback_t cb) warpzone_trace_box_trough_zone;
var void(vector org, vector end, float nomonsters, entity forent) warpzone_trace_line;
var void(vector org, vector end, float nomonsters, entity forent, entity zone, warpzone_trace_callback_t cb) warpzone_trace_line_trough_zone;
void(entity own, float eff, vector org, vector org_visual, vector end) warpzone_trail_particles;

.vector warpzone_findradius_dist;
.vector warpzone_findradius_nearest;
// also set: warpzone parameters, so warpzone_transform_origin can transform vectors from blast's to victim's system
.vector warpzone_findradius_findorigin;
.float warpzone_findradius_findradius;
var entity(vector org, float radius, float needlineofsight) warpzone_find_radius;

float(entity wz, vector v) warpzone_plane_dist;
float(entity wz, vector v) warpzone_target_plane_dist;
var vector(entity wz, vector v) warpzone_transform_origin;
var vector(entity wz, vector v) warpzone_transform_velocity;
vector(entity wz, vector v) warpzone_transform_angles;
vector(entity wz, vector v) warpzone_transform_vangles;
var vector(entity wz, vector v) warpzone_untransform_origin;
vector(entity wz, vector v) warpzone_untransform_velocity;
vector(entity wz, vector v) warpzone_untransform_angles;
vector(entity wz, vector v) warpzone_untransform_vangles;

vector(vector planep, vector planen, vector linep, vector linev) warpzone_plane_and_line_cross;
void(vector org, vector org_visual, vector end, float nomonster, entity forent, warpzone_trace_callback_t cb) warpzone_trace_triangle;
float warpzone_find_nearest_origin_length;
var vector(vector from, vector to, float trace_check) warpzone_find_nearest_origin;
void() warpzone_init;
void() warpzone_enable;
void() warpzone_shutdown;
void(entity wz) warpzone_chain_add;
var void(vector org, vector org_visual, vector end, warpzone_trace_callback_t cb) warpzone_draw_effect_triangle;

.entity warpzone_chain;
entity warpzone_chain_begin;
#if 0
//unused
void(entity e, float chan, string sound_path, float vol, float attn) warpzone_sound;
vector(vector fwd, vector viewer, vector viewee, float traceflag, entity traceent) warpzone_find_line_of_sight;
#endif
void() warpzone_init_hook;
void() warpzone_enable_hook;
void() warpzone_shutdown_hook;
